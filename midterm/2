import numpy as np
import matplotlib.pyplot as plt
import sklearn as sk
import math
import networkx as nx

def sample(i, j):
    pr = (1/math.sqrt(2*math.pi))*math.exp(-4*((a[i]-b[i])**2 + (a[j]-b[j])**2))
    r = np.random.rand()
    if r < pr:
        return 1
    return 0

a = np.random.rand(20)
b = np.random.rand(20)
adj = []
j = 0
for i in range(20):
    adj.append([])
    for j in range(j+1):
        adj[i].append(sample(i, j))
    j += 1

for i in range(19):
    for k in range(i+1,20):
        adj[i].append(adj[k][i])

precision = []
for i in range(20):
    precision.append([])
    for k in range(20):
        if i == k:
            precision[i].append(1)
        elif adj[i][k] == 0:
            precision[i].append(0)
        else:
            precision[i].append(0.245)
precision = np.asmatrix(precision)
covariance = precision.getI()
#plt.matshow(precision)
#plt.matshow(covariance)

G = nx.Graph()
for i in range(20):
    G.add_node(i, pos=(a[i], b[i]))
for i in range(20):
    for k in range(20):
        if adj[i][k] == 1:
            G.add_edge(i, k)
plt.figure()
plt.subplot(121)
nx.draw(G, nx.get_node_attributes(G, 'pos'), with_labels=True, node_color='red')
print(precision, covariance, a, b)
plt.axis([0,1,0,1])
plt.axis('on')
plt.show()


